[["/Users/bs1082/Desktop/workspace/BS23/developer-meetup/informatiq-monthly/unit-testing-with-jest/demo-unit-testing-with-jest/src/app/services/github.service.spec.ts",{"fileContent":"import { HttpStatusCode } from '@angular/common/http';\nimport { HttpClientTestingModule, HttpTestingController, TestRequest } from '@angular/common/http/testing';\nimport { TestBed } from '@angular/core/testing';\nimport { faker } from '@faker-js/faker';\nimport { tap } from 'rxjs';\n\nimport { GithubService, GithubUser } from './github.service';\n\ndescribe('GithubService', () => {\n  let service: GithubService;\n  let controller: HttpTestingController;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [\n        HttpClientTestingModule\n      ]\n    });\n    service = TestBed.inject(GithubService);\n    controller = TestBed.inject(HttpTestingController);\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  describe('getUser', () => {\n    it('should return a user', () => {\n      const username = faker.internet.userName();\n\n      // make mock response\n      const user: GithubUser = {\n        id: faker.number.int(),\n        login: username,\n      };\n\n\n      // make the request\n      service\n        .getUser(username)\n        .pipe(\n          tap((response) => {\n            expect(response).toEqual(user);\n          })\n        )\n        .subscribe();\n\n      // check if the request was made\n      const request: TestRequest = controller.expectOne(`https://api.github.com/users/${username}`);\n\n      // mock the response\n      request.flush(user);\n    });\n\n    it('should throw an error', () => {\n      const username = faker.internet.userName();\n\n      // make mock error response\n      const error = {\n        message: 'Not Found',\n        documentation_url: 'https://docs.github.com/rest/reference/users#get-a-user'\n      };\n\n\n      // make the request\n      service\n        .getUser(username)\n        .pipe(\n          tap({\n            error: (err) => {\n              expect(err).toEqual(error);\n            }\n          })\n        )\n        .subscribe();\n\n      // check if the request was made\n      const request: TestRequest = controller.expectOne(`https://api.github.com/users/${username}`);\n\n      // mock the response\n      request.flush(error, {\n        status: HttpStatusCode.NotFound,\n        statusText: 'Not Found'\n      });\n    });\n  });\n\n});\n","resolvedModuleNames":["/Users/bs1082/Desktop/workspace/BS23/developer-meetup/informatiq-monthly/unit-testing-with-jest/demo-unit-testing-with-jest/src/app/services/github.service.ts","/Users/bs1082/Desktop/workspace/BS23/developer-meetup/informatiq-monthly/unit-testing-with-jest/demo-unit-testing-with-jest/src/app/services/config.service.ts"]}],["/Users/bs1082/Desktop/workspace/BS23/developer-meetup/informatiq-monthly/unit-testing-with-jest/demo-unit-testing-with-jest/src/app/services/config.service.spec.ts",{"fileContent":"import { TestBed } from '@angular/core/testing';\n\nimport { ConfigService } from './config.service';\n\ndescribe('ConfigService', () => {\n  let service: ConfigService;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({});\n    service = TestBed.inject(ConfigService);\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n});\n","resolvedModuleNames":["/Users/bs1082/Desktop/workspace/BS23/developer-meetup/informatiq-monthly/unit-testing-with-jest/demo-unit-testing-with-jest/src/app/services/config.service.ts"]}],["/Users/bs1082/Desktop/workspace/BS23/developer-meetup/informatiq-monthly/unit-testing-with-jest/demo-unit-testing-with-jest/src/app/app.component.spec.ts",{"fileContent":"import { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { TestBed } from '@angular/core/testing';\nimport { of } from 'rxjs';\nimport { AppComponent } from './app.component';\nimport { GithubService } from './services/github.service';\n\ndescribe('AppComponent', () => {\n  let mockGithubService: any;\n\n  beforeEach(async () => {\n    mockGithubService = {\n      getUser: jest.fn()\n    };\n\n    await TestBed.configureTestingModule({\n      imports: [ AppComponent ],\n      providers: [\n        {\n          provide: GithubService,\n          useValue: mockGithubService\n        }\n      ]\n    }).compileComponents();\n  });\n\n  it('should create the app', () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    const app = fixture.componentInstance;\n    expect(app).toBeTruthy();\n  });\n\n  it('should have empty username', () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    const app = fixture.componentInstance;\n    expect(app.username).toEqual('');\n  });\n\n  it('should have empty user', () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    const app = fixture.componentInstance;\n    expect(app.user).toBeUndefined();\n  });\n\n  it('should have username: octcat', () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    const app = fixture.componentInstance;\n    app.username = 'octcat';\n    expect(app.username).toEqual('octcat');\n  });\n\n  it('should have user.login: octcat', () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    const app = fixture.componentInstance;\n    app.username = 'octcat';\n\n    jest.spyOn(mockGithubService, 'getUser').mockReturnValue(of({\n      id: 1,\n      login: 'octcat'\n    }));\n\n    // in this stage, getUser should not be called yet\n    expect(mockGithubService.getUser).toHaveBeenCalledTimes(0);\n\n    app.getUser();\n\n    // getUser should be called once with username: octcat\n    expect(mockGithubService.getUser).toHaveBeenCalledWith('octcat');\n    expect(mockGithubService.getUser).toHaveBeenCalledTimes(1);\n\n    // user should be defined and login should be octcat\n    expect(app.user).toBeDefined();\n    expect(app.user?.login).toEqual('octcat');\n  });\n\n});\n","resolvedModuleNames":["/Users/bs1082/Desktop/workspace/BS23/developer-meetup/informatiq-monthly/unit-testing-with-jest/demo-unit-testing-with-jest/src/app/app.component.ts","/Users/bs1082/Desktop/workspace/BS23/developer-meetup/informatiq-monthly/unit-testing-with-jest/demo-unit-testing-with-jest/src/app/services/github.service.ts","/Users/bs1082/Desktop/workspace/BS23/developer-meetup/informatiq-monthly/unit-testing-with-jest/demo-unit-testing-with-jest/src/app/services/config.service.ts"]}]]