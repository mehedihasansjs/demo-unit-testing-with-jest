{"file":"/Users/bs1082/Desktop/workspace/BS23/developer-meetup/informatiq-monthly/unit-testing-with-jest/demo-unit-testing-with-jest/src/app/services/github.service.spec.ts","mappings":";;AACA,0DAA2G;AAC3G,mDAAgD;AAChD,2CAAwC;AACxC,+BAA2B;AAE3B,qDAA6D;AAE7D,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;IAC7B,IAAI,OAAsB,CAAC;IAC3B,IAAI,UAAiC,CAAC;IAEtC,UAAU,CAAC,GAAG,EAAE;QACd,iBAAO,CAAC,sBAAsB,CAAC;YAC7B,OAAO,EAAE;gBACP,iCAAuB;aACxB;SACF,CAAC,CAAC;QACH,OAAO,GAAG,iBAAO,CAAC,MAAM,CAAC,8BAAa,CAAC,CAAC;QACxC,UAAU,GAAG,iBAAO,CAAC,MAAM,CAAC,+BAAqB,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC3B,MAAM,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,CAAC;IAC/B,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;QACvB,EAAE,CAAC,sBAAsB,EAAE,GAAG,EAAE;YAC9B,MAAM,QAAQ,GAAG,aAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;YAE3C,qBAAqB;YACrB,MAAM,IAAI,GAAe;gBACvB,EAAE,EAAE,aAAK,CAAC,MAAM,CAAC,GAAG,EAAE;gBACtB,KAAK,EAAE,QAAQ;aAChB,CAAC;YAGF,mBAAmB;YACnB,OAAO;iBACJ,OAAO,CAAC,QAAQ,CAAC;iBACjB,IAAI,CACH,IAAA,UAAG,EAAC,CAAC,QAAQ,EAAE,EAAE;gBACf,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACjC,CAAC,CAAC,CACH;iBACA,SAAS,EAAE,CAAC;YAEf,gCAAgC;YAChC,MAAM,OAAO,GAAgB,UAAU,CAAC,SAAS,CAAC,gCAAgC,QAAQ,EAAE,CAAC,CAAC;YAE9F,oBAAoB;YACpB,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uBAAuB,EAAE,GAAG,EAAE;YAC/B,MAAM,QAAQ,GAAG,aAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;YAE3C,2BAA2B;YAC3B,MAAM,KAAK,GAAG;gBACZ,OAAO,EAAE,WAAW;gBACpB,iBAAiB,EAAE,yDAAyD;aAC7E,CAAC;YAGF,mBAAmB;YACnB,OAAO;iBACJ,OAAO,CAAC,QAAQ,CAAC;iBACjB,IAAI,CACH,IAAA,UAAG,EAAC;gBACF,KAAK,EAAE,CAAC,GAAG,EAAE,EAAE;oBACb,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBAC7B,CAAC;aACF,CAAC,CACH;iBACA,SAAS,EAAE,CAAC;YAEf,gCAAgC;YAChC,MAAM,OAAO,GAAgB,UAAU,CAAC,SAAS,CAAC,gCAAgC,QAAQ,EAAE,CAAC,CAAC;YAE9F,oBAAoB;YACpB,OAAO,CAAC,KAAK,CAAC,KAAK,EAAE;gBACnB,MAAM,mCAAyB;gBAC/B,UAAU,EAAE,WAAW;aACxB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AAEL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/bs1082/Desktop/workspace/BS23/developer-meetup/informatiq-monthly/unit-testing-with-jest/demo-unit-testing-with-jest/src/app/services/github.service.spec.ts"],"sourcesContent":["import { HttpStatusCode } from '@angular/common/http';\nimport { HttpClientTestingModule, HttpTestingController, TestRequest } from '@angular/common/http/testing';\nimport { TestBed } from '@angular/core/testing';\nimport { faker } from '@faker-js/faker';\nimport { tap } from 'rxjs';\n\nimport { GithubService, GithubUser } from './github.service';\n\ndescribe('GithubService', () => {\n  let service: GithubService;\n  let controller: HttpTestingController;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [\n        HttpClientTestingModule\n      ]\n    });\n    service = TestBed.inject(GithubService);\n    controller = TestBed.inject(HttpTestingController);\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  describe('getUser', () => {\n    it('should return a user', () => {\n      const username = faker.internet.userName();\n\n      // make mock response\n      const user: GithubUser = {\n        id: faker.number.int(),\n        login: username,\n      };\n\n\n      // make the request\n      service\n        .getUser(username)\n        .pipe(\n          tap((response) => {\n            expect(response).toEqual(user);\n          })\n        )\n        .subscribe();\n\n      // check if the request was made\n      const request: TestRequest = controller.expectOne(`https://api.github.com/users/${username}`);\n\n      // mock the response\n      request.flush(user);\n    });\n\n    it('should throw an error', () => {\n      const username = faker.internet.userName();\n\n      // make mock error response\n      const error = {\n        message: 'Not Found',\n        documentation_url: 'https://docs.github.com/rest/reference/users#get-a-user'\n      };\n\n\n      // make the request\n      service\n        .getUser(username)\n        .pipe(\n          tap({\n            error: (err) => {\n              expect(err).toEqual(error);\n            }\n          })\n        )\n        .subscribe();\n\n      // check if the request was made\n      const request: TestRequest = controller.expectOne(`https://api.github.com/users/${username}`);\n\n      // mock the response\n      request.flush(error, {\n        status: HttpStatusCode.NotFound,\n        statusText: 'Not Found'\n      });\n    });\n  });\n\n});\n"],"version":3}